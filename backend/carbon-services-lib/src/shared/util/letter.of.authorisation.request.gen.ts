import { Injectable } from "@nestjs/common";
import { HelperService } from "./helpers.service";
import { ConfigService } from "@nestjs/config";
import { FileHandlerInterface } from "../file-handler/filehandler.interface";
const PDFDocument = require("pdfkit");
const fs = require("fs");

@Injectable()
export class LetterOfAuthorisationRequestGen {
    constructor(private helperService: HelperService,
        private configService: ConfigService,
        private fileHandler: FileHandlerInterface) {
    }

    async generateLetter(programmeId: string, programmeName: string, sectoralScope: string, orgName: string, programmeLocations: any[]) {
        const filepath = `REQUEST_FOR_LETTER_OF_AUTHORISATION_${programmeId}.pdf`;
        const country = this.configService.get("systemCountryName");
        const date = new Date().toDateString();
        const refNo = this.helperService.generateRandomNumber();

        let programmeLocation;  
        if (programmeLocations.length > 2) {
            programmeLocation = programmeLocations.slice(0, programmeLocations.length - 1).join(", ");
            programmeLocation += " and " + programmeLocations[programmeLocations.length - 1];
        } else {
            programmeLocation = programmeLocations.join(" and ");
        }

        const doc = new PDFDocument();
        const stream = fs.createWriteStream("/tmp/" + filepath);
        doc.pipe(stream);
        doc.fontSize(11);

        doc.text(refNo, {
            align: "left",
            continued: true,
        });

        doc.text(date, {
            align: "right",
        });

        doc.text(`\n\nDear CMS,`, {
            align: "left",
        });

        doc.font("fonts/Inter-Bold.ttf").text(`\n\nRequest for Letter of Authorisation Request ${programmeName}`);


        doc.font("fonts/Inter-Regular.ttf");

        doc.text(`\n\n${orgName} aims to develop ${programmeName} covering ${sectoralScope} in ${programmeLocation} in ${country}. The ITMOs from the activity will be used for meeting NDC targets.`, {
            align: "left",
        });

        doc.text(`\n\nPer ${country}'s international carbon market framework and the Article 6.2 guidance, ${country} shall authorise and commit to the transfer of ITMO generated by the mitigation activity during the implementation period and accordingly undertake the corresponding adjustment in line with modalities specified by UNFCCC of all eligible mitigation activities.`, {
            align: "left",
        });

        doc.text(`\n\n${orgName} requests a letter of authorisation to cover ${programmeName} to ensure the further development of the activity`, {
            align: "left",
        });

        doc.text(`\n\nPlease do not hesitate to request more information. We hope to receive your assistance in further developing the mitigation activity`, {
            align: "left",
        });

        doc.text(`\n\nThank you.`, {
            align: "left",
        });

        doc.text(`\n\nYours faithfully,`, {
            align: "left",
        });

        doc.text(`${orgName}`, {
            align: "left",
        });

        doc.end();

        const content = await new Promise<string>((resolve) => {
            stream.on("finish", function () {
                const contents = fs.readFileSync("/tmp/" + filepath, {
                    encoding: "base64",
                });
                resolve(contents);
            });
        });
        const url = await this.fileHandler.uploadFile(
            "documents/" + filepath,
            content
        );

        return url;
    }
}